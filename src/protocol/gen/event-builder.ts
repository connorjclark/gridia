/* Auto generated by build/build-protocol.js */

type AnimationEvent = {
    type: "animation";
    args: Protocol.Events.Animation;
};
type InitializeEvent = {
    type: "initialize";
    args: Protocol.Events.Initialize;
};
type UpdateSessionStateEvent = {
    type: "updateSessionState";
    args: Protocol.Events.UpdateSessionState;
};
type InitializePartitionEvent = {
    type: "initializePartition";
    args: Protocol.Events.InitializePartition;
};
type LogEvent = {
    type: "log";
    args: Protocol.Events.Log;
};
type RemoveCreatureEvent = {
    type: "removeCreature";
    args: Protocol.Events.RemoveCreature;
};
type SetCreatureEvent = {
    type: "setCreature";
    args: Protocol.Events.SetCreature;
};
type SetPlayerEvent = {
    type: "setPlayer";
    args: Protocol.Events.SetPlayer;
};
type SetSectorEvent = {
    type: "setSector";
    args: Protocol.Events.SetSector;
};
type SetContainerEvent = {
    type: "setContainer";
    args: Protocol.Events.SetContainer;
};
type XpEvent = {
    type: "xp";
    args: Protocol.Events.Xp;
};
type ChatEvent = {
    type: "chat";
    args: Protocol.Events.Chat;
};
type TimeEvent = {
    type: "time";
    args: Protocol.Events.Time;
};
type StartDialogueEvent = {
    type: "startDialogue";
    args: Protocol.Events.StartDialogue;
};
type UpdateDialogueEvent = {
    type: "updateDialogue";
    args: Protocol.Events.UpdateDialogue;
};
type CreatureStatusEvent = {
    type: "creatureStatus";
    args: Protocol.Events.CreatureStatus;
};
type NotificationEvent = {
    type: "notification";
    args: Protocol.Events.Notification;
};
type RawAnimationEvent = {
    type: "rawAnimation";
    args: Protocol.Events.RawAnimation;
};

export type ProtocolEvent = AnimationEvent | InitializeEvent | UpdateSessionStateEvent | InitializePartitionEvent | LogEvent | RemoveCreatureEvent | SetCreatureEvent | SetPlayerEvent | SetSectorEvent | SetContainerEvent | XpEvent | ChatEvent | TimeEvent | StartDialogueEvent | UpdateDialogueEvent | CreatureStatusEvent | NotificationEvent | RawAnimationEvent;

export function animation({ ...animationInstance }: Protocol.Events.Animation): AnimationEvent {
    return { type: "animation", args: arguments[0] };
}
export function initialize({ player, creatureId, secondsPerWorldTick, ticksPerWorldDay }: Protocol.Events.Initialize): InitializeEvent {
    return { type: "initialize", args: arguments[0] };
}
export function updateSessionState({ ...session }: Protocol.Events.UpdateSessionState): UpdateSessionStateEvent {
    return { type: "updateSessionState", args: arguments[0] };
}
export function initializePartition({ name, ...pos }: Protocol.Events.InitializePartition): InitializePartitionEvent {
    return { type: "initializePartition", args: arguments[0] };
}
export function log({ msg }: Protocol.Events.Log): LogEvent {
    return { type: "log", args: arguments[0] };
}
export function removeCreature({ id }: Protocol.Events.RemoveCreature): RemoveCreatureEvent {
    return { type: "removeCreature", args: arguments[0] };
}
export function setCreature(event: Creature | {
    id: number;
    ops: SniffedOperation[];
}): SetCreatureEvent {
    return { type: "setCreature", args: arguments[0] };
}
export function setPlayer(event: Player | {
    ops: SniffedOperation[];
}): SetPlayerEvent {
    return { type: "setPlayer", args: arguments[0] };
}
export function setSector({ ...pos }: Protocol.Events.SetSector): SetSectorEvent {
    return { type: "setSector", args: arguments[0] };
}
export function setContainer(event: Container | {
    id: string;
    ops: SniffedOperation[];
}): SetContainerEvent {
    return { type: "setContainer", args: arguments[0] };
}
export function xp({ skill, xp }: Protocol.Events.Xp): XpEvent {
    return { type: "xp", args: arguments[0] };
}
export function chat({ section, from, creatureId, text }: Protocol.Events.Chat): ChatEvent {
    return { type: "chat", args: arguments[0] };
}
export function time({ epoch }: Protocol.Events.Time): TimeEvent {
    return { type: "time", args: arguments[0] };
}
export function startDialogue({ speakers, dialogue, index, symbols }: Protocol.Events.StartDialogue): StartDialogueEvent {
    return { type: "startDialogue", args: arguments[0] };
}
export function updateDialogue({ id, index, symbols }: Protocol.Events.UpdateDialogue): UpdateDialogueEvent {
    return { type: "updateDialogue", args: arguments[0] };
}
export function creatureStatus({ creatureId, text, color }: Protocol.Events.CreatureStatus): CreatureStatusEvent {
    return { type: "creatureStatus", args: arguments[0] };
}
export function notification({ details }: Protocol.Events.Notification): NotificationEvent {
    return { type: "notification", args: arguments[0] };
}
export function rawAnimation({ pos, tint, path, light, offshootRate, frames }: Protocol.Events.RawAnimation): RawAnimationEvent {
    return { type: "rawAnimation", args: arguments[0] };
}